// Code generated by MockGen. DO NOT EDIT.
// Source: ../ports/storage.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "go.dataflow.ru/service-sales/internal/app/domain"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddSale mocks base method.
func (m *MockStorage) AddSale(sale *domain.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSale", sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSale indicates an expected call of AddSale.
func (mr *MockStorageMockRecorder) AddSale(sale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSale", reflect.TypeOf((*MockStorage)(nil).AddSale), sale)
}

// GetSales mocks base method.
func (m *MockStorage) GetSales() ([]*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSales")
	ret0, _ := ret[0].([]*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSales indicates an expected call of GetSales.
func (mr *MockStorageMockRecorder) GetSales() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSales", reflect.TypeOf((*MockStorage)(nil).GetSales))
}

// GetTotal mocks base method.
func (m *MockStorage) GetTotal(storeID int64, startDate, endDate time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal", storeID, startDate, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockStorageMockRecorder) GetTotal(storeID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockStorage)(nil).GetTotal), storeID, startDate, endDate)
}
